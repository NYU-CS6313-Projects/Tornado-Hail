function out = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   OUT = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   OUT = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   torn = importfile('1950-2014_torn_.csv',2, 59947);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/04/01 13:55:35

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: datetimes (%{MM/dd/yyyy}D)
%	column6: datetimes (%{HH:mm:ss}D)
%   column7: double (%f)
%	column8: text (%s)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: double (%f)
%   column23: double (%f)
%	column24: double (%f)
%   column25: double (%f)
%	column26: double (%f)
%   column27: double (%f)
%	column28: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%{MM/dd/yyyy}D%{HH:mm:ss}D%f%s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
out.om = dataArray{:, 1};
out.yr = dataArray{:, 2};
out.mo = dataArray{:, 3};
out.dy = dataArray{:, 4};
out.date1 = dataArray{:, 5};
out.time = dataArray{:, 6};
out.tz = dataArray{:, 7};
out.st = dataArray{:, 8};
out.stf = dataArray{:, 9};
out.stn = dataArray{:, 10};
out.f = dataArray{:, 11};
out.inj = dataArray{:, 12};
out.fat = dataArray{:, 13};
out.loss = dataArray{:, 14};
out.closs = dataArray{:, 15};
out.slat = dataArray{:, 16};
out.slon = dataArray{:, 17};
out.elat = dataArray{:, 18};
out.elon = dataArray{:, 19};
out.len = dataArray{:, 20};
out.wid = dataArray{:, 21};
out.ns = dataArray{:, 22};
out.sn = dataArray{:, 23};
out.sg = dataArray{:, 24};
out.f1 = dataArray{:, 25};
out.f2 = dataArray{:, 26};
out.f3 = dataArray{:, 27};
out.f4 = dataArray{:, 28};

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% date1=datenum(date1);
% time=datenum(time);


